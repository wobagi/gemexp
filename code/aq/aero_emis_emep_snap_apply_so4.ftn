!--------------------------------------------------------------------------------------------------------------
      subroutine aero_emis_emep_snap_apply_so4(local_hour,imonth,emep_mask,emis_mr_so4,
     &                                         snap1,snap2,snap3,snap4,snap5,snap6,snap7,snap8,snap9,snap10,snap11,
     &                                         frdz,tnd,frdt,ni,nk)
!--------------------------------------------------------------------------------------------------------------
!
!     J2 - 2020-07-26 SO4 emissions distributed in vertical -> 50% split gas/aero
!
!--------------------------------------------------------------------------------------------------------------
#include "impnone.cdk"

      integer ni,nj,nk,level,klevel
      integer imonth,local_hour(ni)
*
      real emis_mr_so4(ni,nk), aero_so4 , x_mr_max

      real emep_mask(ni,nk)   !  EMEP mask from interpolation via PGSM is on level k=1
                              !  mask derived from emissions coded by JS on level k=2
c
      real snap1(ni,nk),snap2(ni,nk),snap3(ni,nk),snap4(ni,nk),snap5(ni,nk)
      real snap6(ni,nk),snap7(ni,nk),snap8(ni,nk),snap9(ni,nk),snap10(ni,nk),snap11(ni,nk)
c
#include "aq_emis_emep_snap_apply.cdk"
c
      real frdz(ni,nk)        ! frdz is calculated as a thickness between mid-levels 
      real tnd(ni,nk)         ! tnd is applied at a level thus in the middle of frdz 
                              ! jwk - April 2009
      real frdt,rtnd
c
      real convert_to_mass_mr
      parameter (convert_to_mass_mr=96.0/28.97)
!
#include "aq_emis_sfc.cdk"
#include "aq_chem_order_adom.cdk"
#include "cc_nml_vars.cdk"
c
       integer i,ipoint,isp_e,k,ihh,imm,ihour,k_mask
c
       real emep_snap
c
       emep_snap(ipoint,isp_e,k,ihh,imm)=
     &              snap1(ipoint,isp_e)  * snap1_tf24(ihh)*24.0  * snap1_tfmonth(imm)*12.0  * snap1_z(k)  + 
     &              snap2(ipoint,isp_e)  * snap2_tf24(ihh)*24.0  * snap2_tfmonth(imm)*12.0  * snap2_z(k)  +
     &              snap3(ipoint,isp_e)  * snap3_tf24(ihh)*24.0  * snap3_tfmonth(imm)*12.0  * snap3_z(k)  +
     &              snap4(ipoint,isp_e)  * snap4_tf24(ihh)*24.0  * snap4_tfmonth(imm)*12.0  * snap4_z(k)  +
     &              snap5(ipoint,isp_e)  * snap5_tf24(ihh)*24.0  * snap5_tfmonth(imm)*12.0  * snap5_z(k)  +
     &              snap6(ipoint,isp_e)  * snap6_tf24(ihh)*24.0  * snap6_tfmonth(imm)*12.0  * snap6_z(k)  +
     &              snap7(ipoint,isp_e)  * snap7_tf24(ihh)*24.0  * snap7_tfmonth(imm)*12.0  * snap7_z(k)  +
     &              snap8(ipoint,isp_e)  * snap8_tf24(ihh)*24.0  * snap8_tfmonth(imm)*12.0  * snap8_z(k)  +
     &              snap9(ipoint,isp_e)  * snap9_tf24(ihh)*24.0  * snap9_tfmonth(imm)*12.0  * snap9_z(k)  +
     &              snap10(ipoint,isp_e) * snap10_tf24(ihh)*24.0 * snap10_tfmonth(imm)*12.0 * snap10_z(k)  
c------------------------------------------------------------------------------------------------------
!
       k_mask=1    !  27 XI 2018 - jwk TNO mask 0/1   ! derived from 1.e16 over the EMEP portion of the grid
!
       aero_so4=(1.0-so4_gas_part)*convert_to_mass_mr
!
       emis_mr_so4=0.0
!
       x_mr_max=0.0

       do i=1,ni
          if(emep_mask(i,k_mask).gt.0.99) then    ! inside extended EMEP grid  ! 25.11.2018 -- jwk
             ihour=local_hour(i)
!
             do level=1,4
                klevel=nk-level+1
                rtnd=frdt/(frdz(i,klevel)*100.0*tnd(i,klevel))
                emis_mr_so4(i,klevel) = emep_snap(i,cnemSO4 ,level,ihour,imonth)*rtnd*Emis_Scale_SOX*aero_so4 ! J2 - 2020-07-26
!                if(emis_mr_so4(i,klevel).gt.x_mr_max) x_mr_max=emis_mr_so4(i,klevel)
             end do

             
!             write(*,77) emis_mr_so4(i,28),emis_mr_so4(i,27),emis_mr_so4(i,26),emis_mr_so4(i,25)
77 	     format('jwk-emis_mr_so4:',1p,4e14.4)

!
!            European volcanos 
! 
!             level=10  ! ~ 700mb - 3km
!             klevel=nk-level+1
!             rtnd=frdt/(frdz(i,klevel)*100.0*tnd(i,klevel))
!             emis_mr_so4(i,klevel) =  snap11(i,cnemSO4)*rtnd*aero_so4       ! J2 - 2020-07-26
         end if
      end do
c
         if(x_mr_max.gt.0.0) write(*,77) x_mr_max

      return
      end
